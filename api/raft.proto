syntax = "proto3";

package api;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

// Raft defines the RPC communication between raft nodes.
service Raft {
  rpc Message (stream Chunk) returns (google.protobuf.Empty) {}
  rpc Join (Member) returns (stream JoinResponse) {}
}

message JoinResponse {
	Member member = 1 [(gogoproto.nullable) = false];
}

message Member {
	// ID specifies the cluster memeber id.
	uint64 id = 1 [(gogoproto.customname) = "ID" ];
	// Address specifies the address of the cluster member.
	string addr = 2 [(gogoproto.customname) = "Address" ];

	MemberType type = 3;
}

message Replicate {
	// CID specifies the transaction change id. 
	uint64 cid = 1 [(gogoproto.customname) = "CID" ];
	// Data specifies the raw replicate data.
	bytes  data  = 2;
}


enum MemberType {
	option (gogoproto.enum_customname) = "MemberType";
	remote = 0 [(gogoproto.enumvalue_customname) = "RemoteMember"];
	removed = 1 [(gogoproto.enumvalue_customname) = "RemovedMember"];
	local = 2 [(gogoproto.enumvalue_customname) = "LocalMember"];
}


// Pool specifies the the cluster pool members.
message Pool {
	repeated Member members = 1 [(gogoproto.nullable) = false];
}

message Chunk {
	// Index specifies the chunk index.
	uint64  index = 1; 
	// Data specifies the raw chunk data.
	bytes  data  = 2 ;
}

message SnapshotHeader {
	// CRC specifies the snapshot crc sum.
	bytes  CRC  = 1;
}