// Code generated by MockGen. DO NOT EDIT.
// Source: internal/daemon/daemon.go

// Package daemonmock is a generated GoMock package.
package daemonmock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	daemon "github.com/shaj13/raftkit/internal/daemon"
	raftpb "github.com/shaj13/raftkit/internal/raftpb"
	raft "go.etcd.io/etcd/raft/v3"
	raftpb0 "go.etcd.io/etcd/raft/v3/raftpb"
)

// MockDaemon is a mock of Daemon interface.
type MockDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonMockRecorder
}

// MockDaemonMockRecorder is the mock recorder for MockDaemon.
type MockDaemonMockRecorder struct {
	mock *MockDaemon
}

// NewMockDaemon creates a new mock instance.
func NewMockDaemon(ctrl *gomock.Controller) *MockDaemon {
	mock := &MockDaemon{ctrl: ctrl}
	mock.recorder = &MockDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaemon) EXPECT() *MockDaemonMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDaemon) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDaemonMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDaemon)(nil).Close))
}

// CreateSnapshot mocks base method.
func (m *MockDaemon) CreateSnapshot() (raftpb0.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot")
	ret0, _ := ret[0].(raftpb0.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockDaemonMockRecorder) CreateSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockDaemon)(nil).CreateSnapshot))
}

// LinearizableRead mocks base method.
func (m *MockDaemon) LinearizableRead(ctx context.Context, retryAfter time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinearizableRead", ctx, retryAfter)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinearizableRead indicates an expected call of LinearizableRead.
func (mr *MockDaemonMockRecorder) LinearizableRead(ctx, retryAfter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinearizableRead", reflect.TypeOf((*MockDaemon)(nil).LinearizableRead), ctx, retryAfter)
}

// ProposeConfChange mocks base method.
func (m_2 *MockDaemon) ProposeConfChange(ctx context.Context, m *raftpb.Member, t raftpb0.ConfChangeType) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ProposeConfChange", ctx, m, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeConfChange indicates an expected call of ProposeConfChange.
func (mr *MockDaemonMockRecorder) ProposeConfChange(ctx, m, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeConfChange", reflect.TypeOf((*MockDaemon)(nil).ProposeConfChange), ctx, m, t)
}

// ProposeReplicate mocks base method.
func (m *MockDaemon) ProposeReplicate(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeReplicate", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeReplicate indicates an expected call of ProposeReplicate.
func (mr *MockDaemonMockRecorder) ProposeReplicate(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeReplicate", reflect.TypeOf((*MockDaemon)(nil).ProposeReplicate), ctx, data)
}

// Push mocks base method.
func (m_2 *MockDaemon) Push(m raftpb0.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Push", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockDaemonMockRecorder) Push(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDaemon)(nil).Push), m)
}

// ReportShutdown mocks base method.
func (m *MockDaemon) ReportShutdown(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportShutdown", id)
}

// ReportShutdown indicates an expected call of ReportShutdown.
func (mr *MockDaemonMockRecorder) ReportShutdown(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportShutdown", reflect.TypeOf((*MockDaemon)(nil).ReportShutdown), id)
}

// ReportSnapshot mocks base method.
func (m *MockDaemon) ReportSnapshot(id uint64, status raft.SnapshotStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportSnapshot", id, status)
}

// ReportSnapshot indicates an expected call of ReportSnapshot.
func (mr *MockDaemonMockRecorder) ReportSnapshot(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSnapshot", reflect.TypeOf((*MockDaemon)(nil).ReportSnapshot), id, status)
}

// ReportUnreachable mocks base method.
func (m *MockDaemon) ReportUnreachable(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportUnreachable", id)
}

// ReportUnreachable indicates an expected call of ReportUnreachable.
func (mr *MockDaemonMockRecorder) ReportUnreachable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnreachable", reflect.TypeOf((*MockDaemon)(nil).ReportUnreachable), id)
}

// Start mocks base method.
func (m *MockDaemon) Start(addr string, oprs ...daemon.Operator) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{addr}
	for _, a := range oprs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDaemonMockRecorder) Start(addr interface{}, oprs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{addr}, oprs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDaemon)(nil).Start), varargs...)
}

// Status mocks base method.
func (m *MockDaemon) Status() (raft.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(raft.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockDaemonMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDaemon)(nil).Status))
}

// TransferLeadership mocks base method.
func (m *MockDaemon) TransferLeadership(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferLeadership", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferLeadership indicates an expected call of TransferLeadership.
func (mr *MockDaemonMockRecorder) TransferLeadership(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLeadership", reflect.TypeOf((*MockDaemon)(nil).TransferLeadership), arg0, arg1)
}
