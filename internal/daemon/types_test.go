// Code generated by MockGen. DO NOT EDIT.
// Source: internal/daemon/types.go

// Package daemon is a generated GoMock package.
package daemon

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	membership "github.com/shaj13/raftkit/internal/membership"
	rpc "github.com/shaj13/raftkit/internal/rpc"
	storage "github.com/shaj13/raftkit/internal/storage"
	raft "go.etcd.io/etcd/raft/v3"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockOperator) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockOperatorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockOperator)(nil).String))
}

// after mocks base method.
func (m *MockOperator) after(d *daemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "after", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// after indicates an expected call of after.
func (mr *MockOperatorMockRecorder) after(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "after", reflect.TypeOf((*MockOperator)(nil).after), d)
}

// before mocks base method.
func (m *MockOperator) before(d *daemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "before", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// before indicates an expected call of before.
func (mr *MockOperatorMockRecorder) before(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "before", reflect.TypeOf((*MockOperator)(nil).before), d)
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockConfig) Dial() rpc.Dial {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial")
	ret0, _ := ret[0].(rpc.Dial)
	return ret0
}

// Dial indicates an expected call of Dial.
func (mr *MockConfigMockRecorder) Dial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockConfig)(nil).Dial))
}

// Pool mocks base method.
func (m *MockConfig) Pool() membership.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(membership.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockConfigMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockConfig)(nil).Pool))
}

// RaftConfig mocks base method.
func (m *MockConfig) RaftConfig() *raft.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaftConfig")
	ret0, _ := ret[0].(*raft.Config)
	return ret0
}

// RaftConfig indicates an expected call of RaftConfig.
func (mr *MockConfigMockRecorder) RaftConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaftConfig", reflect.TypeOf((*MockConfig)(nil).RaftConfig))
}

// SnapInterval mocks base method.
func (m *MockConfig) SnapInterval() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapInterval")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SnapInterval indicates an expected call of SnapInterval.
func (mr *MockConfigMockRecorder) SnapInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapInterval", reflect.TypeOf((*MockConfig)(nil).SnapInterval))
}

// Storage mocks base method.
func (m *MockConfig) Storage() storage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(storage.Storage)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockConfigMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockConfig)(nil).Storage))
}

// TickInterval mocks base method.
func (m *MockConfig) TickInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TickInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TickInterval indicates an expected call of TickInterval.
func (mr *MockConfigMockRecorder) TickInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TickInterval", reflect.TypeOf((*MockConfig)(nil).TickInterval))
}
