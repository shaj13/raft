// Code generated by MockGen. DO NOT EDIT.
// Source: internal/daemon/operator.go

// Package daemon is a generated GoMock package.
package daemon

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockOperator) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockOperatorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockOperator)(nil).String))
}

// after mocks base method.
func (m *MockOperator) after(d *daemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "after", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// after indicates an expected call of after.
func (mr *MockOperatorMockRecorder) after(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "after", reflect.TypeOf((*MockOperator)(nil).after), d)
}

// before mocks base method.
func (m *MockOperator) before(d *daemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "before", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// before indicates an expected call of before.
func (mr *MockOperatorMockRecorder) before(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "before", reflect.TypeOf((*MockOperator)(nil).before), d)
}
