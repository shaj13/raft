// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/go.etcd.io/etcd/raft/v3/node.go

// Package raftengine is a generated GoMock package.
package raftengine

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	raft "go.etcd.io/etcd/raft/v3"
	raftpb "go.etcd.io/etcd/raft/v3/raftpb"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Advance mocks base method.
func (m *MockNode) Advance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Advance")
}

// Advance indicates an expected call of Advance.
func (mr *MockNodeMockRecorder) Advance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockNode)(nil).Advance))
}

// ApplyConfChange mocks base method.
func (m *MockNode) ApplyConfChange(cc raftpb.ConfChangeI) *raftpb.ConfState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyConfChange", cc)
	ret0, _ := ret[0].(*raftpb.ConfState)
	return ret0
}

// ApplyConfChange indicates an expected call of ApplyConfChange.
func (mr *MockNodeMockRecorder) ApplyConfChange(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfChange", reflect.TypeOf((*MockNode)(nil).ApplyConfChange), cc)
}

// Campaign mocks base method.
func (m *MockNode) Campaign(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Campaign", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Campaign indicates an expected call of Campaign.
func (mr *MockNodeMockRecorder) Campaign(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Campaign", reflect.TypeOf((*MockNode)(nil).Campaign), ctx)
}

// Propose mocks base method.
func (m *MockNode) Propose(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Propose indicates an expected call of Propose.
func (mr *MockNodeMockRecorder) Propose(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockNode)(nil).Propose), ctx, data)
}

// ProposeConfChange mocks base method.
func (m *MockNode) ProposeConfChange(ctx context.Context, cc raftpb.ConfChangeI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeConfChange", ctx, cc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeConfChange indicates an expected call of ProposeConfChange.
func (mr *MockNodeMockRecorder) ProposeConfChange(ctx, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeConfChange", reflect.TypeOf((*MockNode)(nil).ProposeConfChange), ctx, cc)
}

// ReadIndex mocks base method.
func (m *MockNode) ReadIndex(ctx context.Context, rctx []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIndex", ctx, rctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadIndex indicates an expected call of ReadIndex.
func (mr *MockNodeMockRecorder) ReadIndex(ctx, rctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIndex", reflect.TypeOf((*MockNode)(nil).ReadIndex), ctx, rctx)
}

// Ready mocks base method.
func (m *MockNode) Ready() <-chan raft.Ready {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(<-chan raft.Ready)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockNodeMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockNode)(nil).Ready))
}

// ReportSnapshot mocks base method.
func (m *MockNode) ReportSnapshot(id uint64, status raft.SnapshotStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportSnapshot", id, status)
}

// ReportSnapshot indicates an expected call of ReportSnapshot.
func (mr *MockNodeMockRecorder) ReportSnapshot(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSnapshot", reflect.TypeOf((*MockNode)(nil).ReportSnapshot), id, status)
}

// ReportUnreachable mocks base method.
func (m *MockNode) ReportUnreachable(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportUnreachable", id)
}

// ReportUnreachable indicates an expected call of ReportUnreachable.
func (mr *MockNodeMockRecorder) ReportUnreachable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnreachable", reflect.TypeOf((*MockNode)(nil).ReportUnreachable), id)
}

// Status mocks base method.
func (m *MockNode) Status() raft.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(raft.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockNodeMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNode)(nil).Status))
}

// Step mocks base method.
func (m *MockNode) Step(ctx context.Context, msg raftpb.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Step indicates an expected call of Step.
func (mr *MockNodeMockRecorder) Step(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockNode)(nil).Step), ctx, msg)
}

// Stop mocks base method.
func (m *MockNode) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// Tick mocks base method.
func (m *MockNode) Tick() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Tick")
}

// Tick indicates an expected call of Tick.
func (mr *MockNodeMockRecorder) Tick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockNode)(nil).Tick))
}

// TransferLeadership mocks base method.
func (m *MockNode) TransferLeadership(ctx context.Context, lead, transferee uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TransferLeadership", ctx, lead, transferee)
}

// TransferLeadership indicates an expected call of TransferLeadership.
func (mr *MockNodeMockRecorder) TransferLeadership(ctx, lead, transferee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLeadership", reflect.TypeOf((*MockNode)(nil).TransferLeadership), ctx, lead, transferee)
}
